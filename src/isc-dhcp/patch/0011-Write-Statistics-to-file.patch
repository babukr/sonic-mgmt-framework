diff --git a/relay/dhcrelay.c b/relay/dhcrelay.c
index 8aac4b3..4de5621 100644
--- a/relay/dhcrelay.c
+++ b/relay/dhcrelay.c
@@ -76,6 +76,14 @@ int bad_circuit_id = 0;		/* Circuit ID option in matching RAI option
 				   did not match any known circuit ID. */
 int missing_circuit_id = 0;	/* Circuit ID option in matching RAI option
 				   was missing. */
+int invalid_header_lengths = 0;	/* Number of packets dropped because
+				   of invalid header length. */
+int dropped_no_ip_address  = 0; /* Number of packets dropped because
+                                   of no IP address assigned. */
+int dropped_reply_on_downstream = 0; /* Number of packets dropped because
+                                      BOOTP reply was received on downstream */
+int dropped_request_on_upstream = 0; /* Number of packets dropped because
+                                      BOOTP request was received on upstream */
 const char *agent_circuit_id_fmt = NULL; /* Circuit ID custom format string. */
 const char *agent_remote_id_fmt = NULL;  /* Remote ID custom format string. */
 int max_hop_count = 10;		/* Maximum hop count */
@@ -117,6 +125,8 @@ struct stream_list {
 static struct stream_list *parse_downstream(char *);
 static struct stream_list *parse_upstream(char *);
 static void setup_streams(void);
+static void write_stats_to_file(struct interface_info *ip);
+
 
 /*
  * A pointer to a subscriber id to add to the message we forward.
@@ -138,6 +148,9 @@ static size_t g_interface_name_alias_map_size = 0;
 static void do_relay4(struct interface_info *, struct dhcp_packet *,
 	              unsigned int, unsigned int, struct iaddr,
 		      struct hardware *);
+static void process_relay4(struct interface_info *, struct dhcp_packet *,
+	              unsigned int, unsigned int, struct iaddr,
+		      struct hardware *);
 static int add_relay_agent_options(struct interface_info *,
 				   struct dhcp_packet *, unsigned,
 				   struct in_addr);
@@ -729,7 +742,7 @@ main(int argc, char **argv) {
 
 	/* Set up the packet handler... */
 	if (local_family == AF_INET)
-		bootp_packet_handler = do_relay4;
+		bootp_packet_handler = process_relay4;
 #ifdef DHCPv6
 	else
 		dhcpv6_packet_handler = do_packet6;
@@ -750,6 +763,14 @@ main(int argc, char **argv) {
 	return (0);
 }
 
+static void
+process_relay4(struct interface_info *ip, struct dhcp_packet *packet,
+               unsigned int length, unsigned int from_port, struct iaddr from,
+               struct hardware *hfrom) {
+        do_relay4(ip, packet, length, from_port, from, hfrom);
+        write_stats_to_file(ip);
+}
+
 static void
 do_relay4(struct interface_info *ip, struct dhcp_packet *packet,
 	  unsigned int length, unsigned int from_port, struct iaddr from,
@@ -762,11 +783,13 @@ do_relay4(struct interface_info *ip, struct dhcp_packet *packet,
 	if (packet->hlen > sizeof packet->chaddr) {
 		log_info("Discarding packet with invalid hlen, received on "
 			 "%s interface.", ip->name);
+                invalid_header_lengths++;
 		return;
 	}
 	if (ip->address_count < 1 || ip->addresses == NULL) {
 		log_info("Discarding packet received on %s interface that "
 			 "has no IPv4 address assigned.", ip->name);
+                dropped_no_ip_address++;
 		return;
 	}
 
@@ -795,6 +818,7 @@ do_relay4(struct interface_info *ip, struct dhcp_packet *packet,
 	if (packet->op == BOOTREPLY) {
 		if (!(ip->flags & INTERFACE_UPSTREAM)) {
 			log_debug("Dropping reply received on %s", ip->name);
+                        dropped_reply_on_downstream++;
 			return;
 		}
 
@@ -826,8 +850,10 @@ do_relay4(struct interface_info *ip, struct dhcp_packet *packet,
 		   option that we put on the request to which the server is
 		   replying. */
 		if (!(length =
-		      strip_relay_agent_options(ip, &out, packet, length)))
+		      strip_relay_agent_options(ip, &out, packet, length))) {
+                        log_error("Failed to process agent options %u\n", length);
 			return;
+                }
 
 		if (!out) {
 			log_error("Packet to bogus giaddr %s.\n",
@@ -847,6 +873,8 @@ do_relay4(struct interface_info *ip, struct dhcp_packet *packet,
 
 			++server_packets_relayed;
 		}
+
+                write_stats_to_file(out);
 		return;
 	}
 
@@ -857,6 +885,7 @@ do_relay4(struct interface_info *ip, struct dhcp_packet *packet,
 
 	if (!(ip->flags & INTERFACE_DOWNSTREAM)) {
 		log_debug("Dropping request received on %s", ip->name);
+                dropped_request_on_upstream++;
 		return;
 	}
 
@@ -864,8 +893,10 @@ do_relay4(struct interface_info *ip, struct dhcp_packet *packet,
 	 * drop the packet.  Note this may set packet->giaddr if RFC3527
 	 * is enabled. */
 	if (!(length = add_relay_agent_options(ip, packet, length,
-					       ip->addresses[0])))
+					       ip->addresses[0]))) {
+		log_info("Failed to add relay agent options on %s", ip->name);
 		return;
+        }
 
 	/* If giaddr is not already set, Set it so the server can
 	   figure out what net it's from and so that we can later
@@ -2203,6 +2234,7 @@ void request_v4_interface(const char* name, int flags) {
 
         strncpy(tmp->name, name, len);
         interface_snorf(tmp, (INTERFACE_REQUESTED | flags));
+        write_stats_to_file(tmp);
         interface_dereference(&tmp, MDL);
 }
 
@@ -2275,3 +2307,44 @@ free_interface_alias_map(void) {
 	free(g_interface_name_alias_map);
 	g_interface_name_alias_map_size = 0;
 }
+
+
+/* Statistics support to file */
+static void write_stats_to_file(struct interface_info *ip)
+{
+   FILE *pf;
+   int pfdesc;
+   char filename[128] = "/tmp/dhcprelaystats/dhcp-relay-ipv4-stats-";
+
+   /* Stats file is per downstream interface */
+   if (!(ip->flags & INTERFACE_DOWNSTREAM)) {
+       return;
+   }
+
+   /* Append the interface name */
+   strcat(filename, ip->name);
+
+   pfdesc = open(filename, O_CREAT | O_TRUNC | O_WRONLY, 0644);
+   if (pfdesc < 0) {
+      log_error("Can't create %s: %m", filename);
+   } else {
+      pf = fdopen(pfdesc, "w");
+      if (!pf)
+           log_error("Can't fdopen %s: %m", filename);
+      else {
+           fprintf(pf, "Packets relayed from client to server:     %d\n",client_packets_relayed);
+           fprintf(pf, "Packets relayed from server to client:     %d\n",server_packets_relayed);
+           fprintf(pf, "Errors sending packets to clients:         %d\n",client_packet_errors);
+           fprintf(pf, "Errors sending packets to servers:         %d\n",server_packet_errors);
+           fprintf(pf, "Packets dropped with bogus GIADDR:         %d\n",bogus_giaddr_drops);
+           fprintf(pf, "Packets dropped due to bad relay info:     %d\n",corrupt_agent_options);
+           fprintf(pf, "Packets dropped due to missing relay info: %d\n",missing_agent_option);
+           fprintf(pf, "Packets dropped due to invalid hdr length: %d\n",invalid_header_lengths);
+           fprintf(pf, "Packets dropped on interface with no IP:   %d\n",dropped_no_ip_address);
+           fprintf(pf, "Replies dropped on downstream interface:   %d\n",dropped_reply_on_downstream);
+           fprintf(pf, "Requests dropped on upstream interface:    %d\n",dropped_request_on_upstream);
+
+           fclose(pf);
+      }
+   }
+}
