#!/usr/bin/env python
#
# snmpconfd
#
# SNMP Configuration daemon for SONiC
#
#  Upon starting, this daemon reads SNMP confguration from the
#  Config DB, converts the tables into equivalent snmpd.conf file,
#  and then restarts snmpd process to re-read the modified 
#  configuration.
#

try:
    import os
    import subprocess
    import sys
    import syslog
    from swsssdk import ConfigDBConnector
    import threading
except ImportError as err:
    raise ImportError("%s - required module not found" % str(err))

VERSION = "1.0"

SYSLOG_IDENTIFIER = "snmpconfd"


# ========================== Syslog wrappers ==========================

def log_info(msg):
    syslog.openlog(SYSLOG_IDENTIFIER)
    syslog.syslog(syslog.LOG_INFO, msg)
    syslog.closelog()


def log_warning(msg):
    syslog.openlog(SYSLOG_IDENTIFIER)
    syslog.syslog(syslog.LOG_WARNING, msg)
    syslog.closelog()


def log_error(msg):
    syslog.openlog(SYSLOG_IDENTIFIER)
    syslog.syslog(syslog.LOG_ERR, msg)
    syslog.closelog()


# ============================== Classes ==============================

class SNMPConfManager(object):
    """
    Class which reads SNMP confguration from Config DB,
    translates them into equivalent snmpd.conf file.

    Attributes:
        config_db: Handle to Config Redis database via SwSS SDK
    """
    SNMP_SERVER     = 'SNMP_SERVER'
    SNMP_COMMUNITY  = 'SNMP_SERVER_COMMUNITY'
    SNMP_GROUP      = 'SNMP_SERVER_GROUP'
    SNMP_VIEW       = 'SNMP_SERVER_VIEW'
    SNMP_USER       = 'SNMP_SERVER_USER'
    SNMP_TARGET     = 'SNMP_SERVER_TARGET'
    SNMP_SERVER_PARAMS = 'SNMP_SERVER_PARAMS'
    SNMP_TRAP_CONFIG = 'SNMP_TRAP_CONFIG'
    SNMP_AGENT_ADDRESS_CONFIG = 'SNMP_AGENT_ADDRESS_CONFIG'

    def __init__(self):
        # Open a handle to the Config database
        self.config_db = ConfigDBConnector()
        self.config_db.connect()
        self.update_thread = None
        self.lock = threading.Lock()
        self.num_changes = 0
        self.last_num_changes = 0

    def run_command(self, cmd):
        """
        Given a list of shell commands, run them in order

        Args:
            commands: List of strings, each string is a shell command
        """
        proc = subprocess.Popen(cmd, shell=True)

        (stdout, stderr) = proc.communicate()

        if proc.returncode != 0:
            log_error("Error running command '{}'".format(cmd))

    def render_configuration(self):
        """
        API to render the snmpd.conf.j2 template
        """
        log_info("SNMP configuration changed. Updating snmpd.conf...")
        self.run_command("sonic-cfggen -d -y /etc/sonic/snmp.yml -t /usr/share/sonic/templates/snmpd.conf.j2 > /etc/snmp/snmpd.conf")
        self.run_command("[ \"$(supervisorctl pid snmpd)\" != \"0\" ] && supervisorctl restart snmpd || true")

    def check_and_update_snmp_conf(self):
        with self.lock:
            if self.last_num_changes == self.num_changes and self.num_changes > 0:
                self.render_configuration()
                self.last_num_changes = 0
                self.num_changes = 0
                self.update_thread = None
            else:
                log_info("{} SNMP configuration changes detected in the last 2.5 sec window.".format(self.num_changes - self.last_num_changes))
                self.last_num_changes = self.num_changes
                self.update_thread = threading.Timer(2.5, self.check_and_update_snmp_conf)
                self.update_thread.start()

    def notification_handler(self, key, data):
        with self.lock:
            if self.num_changes == 0:
                log_info("SNMP configuration change detected.")
            self.num_changes = self.num_changes + 1
            if not self.update_thread:
                self.update_thread = threading.Timer(2.5, self.check_and_update_snmp_conf)
                self.update_thread.start()

    def run(self):
        # Generate /etc/snmp/snmpd.conf to begin with
        self.render_configuration()

        # Subscribe to notifications when SNMP table changes
        self.config_db.subscribe(self.SNMP_SERVER,    lambda table, key, data: self.notification_handler(key, data))
        self.config_db.subscribe(self.SNMP_COMMUNITY, lambda table, key, data: self.notification_handler(key, data))
        self.config_db.subscribe(self.SNMP_GROUP,     lambda table, key, data: self.notification_handler(key, data))
        self.config_db.subscribe(self.SNMP_VIEW,      lambda table, key, data: self.notification_handler(key, data))
        self.config_db.subscribe(self.SNMP_USER,      lambda table, key, data: self.notification_handler(key, data))
        self.config_db.subscribe(self.SNMP_TARGET,    lambda table, key, data: self.notification_handler(key, data))
        self.config_db.subscribe(self.SNMP_SERVER_PARAMS, lambda table, key, data: self.notification_handler(key, data))
        self.config_db.subscribe(self.SNMP_AGENT_ADDRESS_CONFIG, lambda table, key, data: self.notification_handler(key, data))
        self.config_db.subscribe(self.SNMP_TRAP_CONFIG, lambda table, key, data: self.notification_handler(key, data))

        # Indefinitely listen for Config DB notifications
        self.config_db.listen()


# ============================= Functions =============================

def main():
    log_info("SNMP config manager daemon starting up...")

    if not os.geteuid() == 0:
        log_error("Must be root to run this daemon")
        print "Error: Must be root to run this daemon"
        sys.exit(1)

    # Instantiate an SNMPConfManager object
    confMgr = SNMPConfManager()
    confMgr.run()

if __name__ == "__main__":
    main()
